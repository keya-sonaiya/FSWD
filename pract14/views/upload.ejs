<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Job Portal - Resume Upload</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      background: linear-gradient(135deg, #8c9ce4 0%, #855cad 50%, #d79edd 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
      color: #334155;
      position: relative;
      overflow-x: hidden;
    }

    body::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: 
        radial-gradient(circle at 20% 30%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),
        radial-gradient(circle at 80% 70%, rgba(255, 255, 255, 0.05) 0%, transparent 50%);
      pointer-events: none;
      animation: float 6s ease-in-out infinite;
    }

    @keyframes float {
      0%, 100% { transform: translateY(0px); }
      50% { transform: translateY(-10px); }
    }

    .container {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      padding: 48px;
      border-radius: 24px;
      box-shadow: 
        0 20px 25px -5px rgba(0, 0, 0, 0.1),
        0 10px 10px -5px rgba(0, 0, 0, 0.04),
        inset 0 1px 0 rgba(255, 255, 255, 0.4);
      width: 100%;
      max-width: 500px;
      border: 1px solid rgba(255, 255, 255, 0.2);
      position: relative;
      animation: slideIn 0.8s ease-out;
    }

    @keyframes slideIn {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .header {
      text-align: center;
      margin-bottom: 36px;
    }

    .header h2 {
      font-weight: 700;
      font-size: 28px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin-bottom: 8px;
    }

    .header p {
      color: #64748b;
      font-size: 15px;
      font-weight: 400;
    }

    .upload-area {
      border: 2px dashed #cbd5e1;
      border-radius: 16px;
      padding: 48px 24px;
      text-align: center;
      background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      cursor: pointer;
      position: relative;
      margin-bottom: 28px;
      overflow: hidden;
    }

    .upload-area::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
      transition: left 0.5s;
    }

    .upload-area:hover {
      border-color: #667eea;
      background: linear-gradient(135deg, #eff6ff 0%, #f0f4ff 100%);
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.15);
    }

    .upload-area:hover::before {
      left: 100%;
    }

    .upload-area.dragover {
      border-color: #667eea;
      background: linear-gradient(135deg, #eff6ff 0%, #f0f4ff 100%);
      transform: scale(1.02);
      box-shadow: 0 12px 30px rgba(102, 126, 234, 0.2);
    }

    .upload-icon {
      width: 64px;
      height: 64px;
      margin: 0 auto 20px;
      color: #667eea;
      animation: pulse 2s infinite;
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.7; }
    }

    .upload-text {
      font-size: 18px;
      margin-bottom: 8px;
      font-weight: 600;
      color: #1e293b;
    }

    .upload-subtext {
      font-size: 14px;
      color: #64748b;
      margin-bottom: 20px;
    }

    .supported-formats {
      display: flex;
      justify-content: center;
      gap: 12px;
      margin-top: 16px;
    }

    .format-badge {
      background: rgba(102, 126, 234, 0.1);
      color: #667eea;
      padding: 4px 12px;
      border-radius: 16px;
      font-size: 12px;
      font-weight: 500;
      border: 1px solid rgba(102, 126, 234, 0.2);
    }

    .file-input {
      opacity: 0;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      cursor: pointer;
    }

    .file-info {
      background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
      border: 1px solid #bae6fd;
      border-radius: 12px;
      padding: 16px 20px;
      margin-bottom: 24px;
      display: none;
      align-items: center;
      gap: 16px;
      animation: fadeInUp 0.3s ease-out;
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .file-info.show {
      display: flex;
    }

    .file-details {
      flex: 1;
    }

    .file-name {
      font-size: 15px;
      color: #0c4a6e;
      font-weight: 500;
      margin-bottom: 4px;
    }

    .file-size {
      font-size: 13px;
      color: #0369a1;
      opacity: 0.8;
    }

    .remove-file {
      background: rgba(239, 68, 68, 0.1);
      border: 1px solid rgba(239, 68, 68, 0.2);
      color: #ef4444;
      cursor: pointer;
      padding: 8px;
      border-radius: 8px;
      transition: all 0.2s ease;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .remove-file:hover {
      background: rgba(239, 68, 68, 0.2);
      transform: scale(1.05);
    }

    .upload-btn {
      width: 100%;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: rgb(255, 255, 255);
      border: none;
      padding: 16px 32px;
      border-radius: 12px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      opacity: 0.8;
      pointer-events: none;
      position: relative;
      overflow: hidden;
    }

    .upload-btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.5s;
    }

    .upload-btn.enabled {
      opacity: 1;
      pointer-events: auto;
    }

    .upload-btn:hover.enabled {
      background: linear-gradient(135deg, #5a67d8 0%, #6b46c1 100%);
      transform: translateY(-2px);
      box-shadow: 0 12px 30px rgba(102, 126, 234, 0.4);
    }

    .upload-btn:hover.enabled::before {
      left: 100%;
    }

    .upload-btn:active.enabled {
      transform: translateY(0);
    }

    .progress-bar {
      width: 100%;
      height: 6px;
      background: rgba(102, 126, 234, 0.1);
      border-radius: 3px;
      overflow: hidden;
      margin-top: 16px;
      display: none;
    }

    .progress-bar.show {
      display: block;
    }

    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, #667eea, #764ba2);
      border-radius: 3px;
      transition: width 0.3s ease;
      width: 0%;
    }

    .message {
      border-radius: 12px;
      padding: 16px 20px;
      margin-top: 20px;
      display: none;
      align-items: center;
      gap: 12px;
      font-weight: 500;
      animation: fadeInUp 0.3s ease-out;
    }

    .message.show {
      display: flex;
    }

    .message.success {
      background: linear-gradient(135deg, #d1fae5 0%, #bbf7d0 100%);
      border: 1px solid #86efac;
      color: #065f46;
    }

    .message.error {
      background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
      border: 1px solid #fca5a5;
      color: #991b1b;
    }

    .message.warning {
      background: linear-gradient(135deg, #fffbeb 0%, #fef3c7 100%);
      border: 1px solid #fcd34d;
      color: #92400e;
    }

    @media (max-width: 500px) {
      .container {
        padding: 32px 24px;
        margin: 10px;
        border-radius: 20px;
      }
      
      .upload-area {
        padding: 36px 20px;
      }

      .header h2 {
        font-size: 24px;
      }

      .upload-icon {
        width: 56px;
        height: 56px;
      }
    }

    .floating-particles {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      overflow: hidden;
    }

    .particle {
      position: absolute;
      width: 4px;
      height: 4px;
      background: rgba(255, 255, 255, 0.6);
      border-radius: 50%;
      animation: floatParticle 8s infinite linear;
    }

    @keyframes floatParticle {
      0% {
        opacity: 0;
        transform: translateY(100vh) rotate(0deg);
      }
      10% {
        opacity: 1;
      }
      90% {
        opacity: 1;
      }
      100% {
        opacity: 0;
        transform: translateY(-100px) rotate(360deg);
      }
    }
  </style>
</head>
<body>
  <div class="floating-particles" id="particles"></div>
  
  <div class="container">
    <div class="header">
      <h2>Upload Your Resume</h2>
      <p>Share your experience with us and take the next step in your career</p>
    </div>
    
    <form action="/upload" method="POST" enctype="multipart/form-data">
      <div class="upload-area" id="uploadArea">
        <input type="file" name="resume" accept=".pdf" required class="file-input" id="fileInput" />
        
        <svg class="upload-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
          <polyline points="17,8 12,3 7,8"/>
          <line x1="12" y1="3" x2="12" y2="15"/>
        </svg>
        
        <div class="upload-text">Drop your resume here or click to browse</div>
        <div class="upload-subtext">Maximum file size: 2MB</div>
        
        <div class="supported-formats">
          <span class="format-badge">PDF</span>
        </div>
      </div>

      <div class="file-info" id="fileInfo">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#0369a1" stroke-width="2">
          <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
        </svg>
        <div class="file-details">
          <div class="file-name" id="fileName"></div>
          <div class="file-size" id="fileSize"></div>
        </div>
        <button type="button" class="remove-file" id="removeFile">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>

      <button type="submit" class="upload-btn" id="uploadBtn">
        <span>Upload Resume</span>
      </button>

      <div class="progress-bar" id="progressBar">
        <div class="progress-fill" id="progressFill"></div>
      </div>

      <div class="message success" id="successMessage">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
          <polyline points="22,4 12,14.01 9,11.01"></polyline>
        </svg>
        <span>Resume uploaded successfully!</span>
      </div>

      <div class="message error" id="errorMessage">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="15" y1="9" x2="9" y2="15"></line>
          <line x1="9" y1="9" x2="15" y2="15"></line>
        </svg>
        <span id="errorText">An error occurred. Please try again.</span>
      </div>

      <div class="message warning" id="warningMessage">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path>
          <line x1="12" y1="9" x2="12" y2="13"></line>
          <line x1="12" y1="17" x2="12.01" y2="17"></line>
        </svg>
        <span id="warningText">Warning message</span>
      </div>
    </form>
  </div>

  <script>
    const uploadArea = document.getElementById('uploadArea');
    const fileInput = document.getElementById('fileInput');
    const fileInfo = document.getElementById('fileInfo');
    const fileName = document.getElementById('fileName');
    const fileSize = document.getElementById('fileSize');
    const removeFile = document.getElementById('removeFile');
    const uploadBtn = document.getElementById('uploadBtn');
    const progressBar = document.getElementById('progressBar');
    const progressFill = document.getElementById('progressFill');
    const successMessage = document.getElementById('successMessage');
    const errorMessage = document.getElementById('errorMessage');
    const errorText = document.getElementById('errorText');
    const warningMessage = document.getElementById('warningMessage');
    const warningText = document.getElementById('warningText');

    // Create floating particles
    function createParticles() {
      const particlesContainer = document.getElementById('particles');
      for (let i = 0; i < 50; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        particle.style.left = Math.random() * 100 + '%';
        particle.style.animationDelay = Math.random() * 8 + 's';
        particle.style.animationDuration = (8 + Math.random() * 4) + 's';
        particlesContainer.appendChild(particle);
      }
    }

    createParticles();

    // Drag and drop functionality
    uploadArea.addEventListener('dragover', (e) => {
      e.preventDefault();
      uploadArea.classList.add('dragover');
    });

    uploadArea.addEventListener('dragleave', () => {
      uploadArea.classList.remove('dragover');
    });

    uploadArea.addEventListener('drop', (e) => {
      e.preventDefault();
      uploadArea.classList.remove('dragover');
      
      const files = e.dataTransfer.files;
      if (files.length > 0) {
        const file = files[0];
        validateAndShowFile(file);
      }
    });

    // File input change
    fileInput.addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (file) {
        validateAndShowFile(file);
      }
    });

    function validateAndShowFile(file) {
      hideMessages();
      
      if (file.type !== 'application/pdf') {
        showMessage('error', 'Please select a PDF file only.');
        return;
      }
      
      if (file.size > 2 * 1024 * 1024) {
        showMessage('error', 'File size limit exceeded. Maximum allowed size is 2MB.');
        return;
      }
      
      // Additional file validation
      if (file.size < 1024) {
        showMessage('warning', 'File seems too small. Please ensure it\'s a valid resume.');
        return;
      }
      
      showFileInfo(file);
    }

    // Remove file
    removeFile.addEventListener('click', () => {
      fileInput.value = '';
      hideFileInfo();
    });

    function showFileInfo(file) {
      fileName.textContent = file.name;
      fileSize.textContent = formatFileSize(file.size);
      fileInfo.classList.add('show');
      uploadBtn.classList.add('enabled');
    }

    function hideFileInfo() {
      fileInfo.classList.remove('show');
      uploadBtn.classList.remove('enabled');
      progressBar.classList.remove('show');
      hideMessages();
      progressFill.style.width = '0%';
    }

    function hideMessages() {
      successMessage.classList.remove('show');
      errorMessage.classList.remove('show');
      warningMessage.classList.remove('show');
    }

    function showMessage(type, message) {
      hideMessages();
      
      if (type === 'error') {
        errorText.textContent = message;
        errorMessage.classList.add('show');
      } else if (type === 'success') {
        successMessage.classList.add('show');
      } else if (type === 'warning') {
        warningText.textContent = message;
        warningMessage.classList.add('show');
      }
      
      // Auto-hide non-success messages after 5 seconds
      if (type !== 'success') {
        setTimeout(() => {
          hideMessages();
        }, 5000);
      }
    }

    function formatFileSize(bytes) {
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    function showAlert(message, type) {
      // This function is now replaced by showMessage
      showMessage(type, message);
    }

    // Enhanced form submission with progress simulation
    document.querySelector('form').addEventListener('submit', (e) => {
      e.preventDefault();
      
      const file = fileInput.files[0];
      if (!file) {
        showMessage('error', 'Please select a file to upload.');
        return;
      }
      
      if (file.type !== 'application/pdf') {
        showMessage('error', 'Please select a PDF file only.');
        return;
      }
      
      if (file.size > 2 * 1024 * 1024) {
        showMessage('error', 'File size limit exceeded. Maximum allowed size is 2MB.');
        return;
      }

      // Hide any existing messages
      hideMessages();

      // Simulate upload progress
      uploadBtn.textContent = 'Uploading...';
      uploadBtn.style.pointerEvents = 'none';
      progressBar.classList.add('show');
      
      let progress = 0;
      const progressInterval = setInterval(() => {
        progress += Math.random() * 15;
        if (progress > 100) {
          progress = 100;
          clearInterval(progressInterval);
          
          // Show success message
          setTimeout(() => {
            progressBar.classList.remove('show');
            showMessage('success', 'Resume uploaded successfully!');
            uploadBtn.textContent = 'Upload Another Resume';
            uploadBtn.style.pointerEvents = 'auto';
            
            // Reset after 3 seconds
            setTimeout(() => {
              hideFileInfo();
              uploadBtn.textContent = 'Upload Resume';
            }, 3000);
          }, 500);
        }
        progressFill.style.width = progress + '%';
      }, 200);
    });

    // Add some interactive hover effects
    uploadArea.addEventListener('mouseenter', () => {
      if (!fileInfo.classList.contains('show')) {
        uploadArea.style.transform = 'translateY(-2px) scale(1.01)';
      }
    });

    uploadArea.addEventListener('mouseleave', () => {
      if (!uploadArea.classList.contains('dragover')) {
        uploadArea.style.transform = 'translateY(0) scale(1)';
      }
    });
  </script>
</body>
</html>